# 企业级应用生产环境Docker Compose配置
# 优化的生产环境服务栈，包含高可用性和安全性配置

version: '3.8'

services:
  # =============================================================================
  # 应用服务（多实例）
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_ENV: production
        APP_VERSION: ${APP_VERSION:-1.0.0}
    image: enterprise-app:${APP_VERSION:-latest}
    restart: always
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - APP_ENVIRONMENT=production
      - APP_DEBUG=false
      - APP_WORKERS=4
      - DB_DATABASE_URL=${DB_DATABASE_URL}
      - DB_READ_DATABASE_URL=${DB_READ_DATABASE_URL}
      - REDIS_REDIS_URL=${REDIS_REDIS_URL}
      - SECURITY_JWT_SECRET_KEY=${SECURITY_JWT_SECRET_KEY}
      - SECURITY_API_KEY_SECRET=${SECURITY_API_KEY_SECRET}
      - OBSERVABILITY_JAEGER_ENDPOINT=${OBSERVABILITY_JAEGER_ENDPOINT}
      - OBSERVABILITY_PROMETHEUS_GATEWAY_URL=${OBSERVABILITY_PROMETHEUS_GATEWAY_URL}
      - OBSERVABILITY_SMTP_HOST=${OBSERVABILITY_SMTP_HOST}
      - OBSERVABILITY_SMTP_USERNAME=${OBSERVABILITY_SMTP_USERNAME}
      - OBSERVABILITY_SMTP_PASSWORD=${OBSERVABILITY_SMTP_PASSWORD}
      - OBSERVABILITY_SLACK_WEBHOOK_URL=${OBSERVABILITY_SLACK_WEBHOOK_URL}
      - ENTERPRISE_RABBITMQ_URL=${ENTERPRISE_RABBITMQ_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs:rw
      - app_data:/app/data:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # =============================================================================
  # 数据库服务（主从复制）
  # =============================================================================
  postgres-master:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./docker/postgres/master/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/master/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./docker/postgres/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres-slave:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MASTER_HOST: postgres-master
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
      - ./docker/postgres/slave/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/init-slave.sh:/docker-entrypoint-initdb.d/init-slave.sh:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
    depends_on:
      - postgres-master
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Redis集群
  # =============================================================================
  redis-master:
    image: redis:7-alpine
    restart: always
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis-slave:
    image: redis:7-alpine
    restart: always
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD}
      --masterauth ${REDIS_PASSWORD}
      --replicaof redis-master 6379
    volumes:
      - redis_slave_data:/data
    depends_on:
      - redis-master
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis-sentinel:
    image: redis:7-alpine
    restart: always
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./docker/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
      - redis-slave
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # =============================================================================
  # 消息队列集群
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # 负载均衡器
  # =============================================================================
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # 监控服务
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prod/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/prod/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - backend
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres-master:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${GRAFANA_DB_USER}
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}
      GF_SESSION_PROVIDER: redis
      GF_SESSION_PROVIDER_CONFIG: addr=redis-master:6379,pool_size=100,db=grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/prod/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/prod/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - postgres-master
      - redis-master
    networks:
      - backend
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  alertmanager:
    image: prom/alertmanager:latest
    restart: always
    volumes:
      - ./docker/alertmanager/prod/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://${DOMAIN}/alertmanager'
      - '--cluster.listen-address=0.0.0.0:9094'
    networks:
      - backend
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # =============================================================================
  # 日志收集
  # =============================================================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    restart: always
    user: root
    volumes:
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
      KIBANA_HOST: ${KIBANA_HOST}
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # =============================================================================
  # 备份服务
  # =============================================================================
  backup:
    image: postgres:15-alpine
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./docker/backup/backup.sh:/backup.sh:ro
      - backup_data:/backups
    command: >
      sh -c '
        apk add --no-cache dcron &&
        echo "0 2 * * * /backup.sh" | crontab - &&
        crond -f
      '
    depends_on:
      - postgres-master
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# =============================================================================
# 网络配置
# =============================================================================
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24
  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/24

# =============================================================================
# 数据卷配置
# =============================================================================
volumes:
  # 应用数据
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/app/logs
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/app/data
  
  # 数据库数据
  postgres_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres/master
  postgres_slave_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres/slave
  
  # Redis数据
  redis_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis/master
  redis_slave_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis/slave
  
  # 消息队列数据
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/rabbitmq
  
  # 监控数据
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/alertmanager
  
  # 日志数据
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/nginx/logs
  
  # 备份数据
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH}
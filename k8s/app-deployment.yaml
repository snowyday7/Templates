# 企业应用Kubernetes部署配置
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-app
  namespace: enterprise-app
  labels:
    app: enterprise-app
    version: v1
    component: backend
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "企业级应用后端服务"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: enterprise-app
      version: v1
  template:
    metadata:
      labels:
        app: enterprise-app
        version: v1
        component: backend
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: enterprise-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: app
        image: enterprise-app:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8001
          protocol: TCP
        env:
        - name: APP_ENVIRONMENT
          value: "production"
        - name: APP_DEBUG
          value: "false"
        - name: APP_WORKERS
          value: "4"
        - name: DB_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: database-url
        - name: DB_READ_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: read-database-url
        - name: REDIS_REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-url
        - name: SECURITY_JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: jwt-secret
        - name: SECURITY_API_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: api-key-secret
        - name: OBSERVABILITY_JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: jaeger-endpoint
        - name: OBSERVABILITY_PROMETHEUS_GATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: prometheus-gateway-url
        - name: OBSERVABILITY_SMTP_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: smtp-host
        - name: OBSERVABILITY_SMTP_USERNAME
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: username
        - name: OBSERVABILITY_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: password
        - name: OBSERVABILITY_SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: notification-secret
              key: slack-webhook-url
        - name: ENTERPRISE_RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: rabbitmq-url
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: monitoring-secret
              key: sentry-dsn
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true
        - name: app-logs
          mountPath: /app/logs
        - name: app-data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-config
        configMap:
          name: app-config
      - name: app-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - enterprise-app
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
# 服务配置
apiVersion: v1
kind: Service
metadata:
  name: enterprise-app-service
  namespace: enterprise-app
  labels:
    app: enterprise-app
    component: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8001
    targetPort: metrics
    protocol: TCP
  selector:
    app: enterprise-app
    version: v1
---
# 水平Pod自动扩缩器
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: enterprise-app-hpa
  namespace: enterprise-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: enterprise-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# Pod中断预算
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-app-pdb
  namespace: enterprise-app
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: enterprise-app
      version: v1
---
# 服务账户
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enterprise-app
  namespace: enterprise-app
  labels:
    app: enterprise-app
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/enterprise-app-role
automountServiceAccountToken: true
---
# 角色绑定
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: enterprise-app-binding
  namespace: enterprise-app
subjects:
- kind: ServiceAccount
  name: enterprise-app
  namespace: enterprise-app
roleRef:
  kind: Role
  name: enterprise-app-role
  apiGroup: rbac.authorization.k8s.io
---
# 角色
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: enterprise-app-role
  namespace: enterprise-app
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
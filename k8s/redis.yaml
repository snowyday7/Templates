# Redis主节点部署
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: enterprise-app
  labels:
    app: redis
    role: master
    component: cache
spec:
  serviceName: redis-master-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
      role: master
  template:
    metadata:
      labels:
        app: redis
        role: master
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - name: redis
          containerPort: 6379
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - name: metrics
          containerPort: 9121
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi
---
# Redis从节点部署
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-slave
  namespace: enterprise-app
  labels:
    app: redis
    role: slave
    component: cache
spec:
  serviceName: redis-slave-service
  replicas: 2
  selector:
    matchLabels:
      app: redis
      role: slave
  template:
    metadata:
      labels:
        app: redis
        role: slave
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - name: redis
          containerPort: 6379
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --replicaof
        - redis-master-service
        - "6379"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - name: metrics
          containerPort: 9121
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi
---
# Redis Sentinel部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: enterprise-app
  labels:
    app: redis-sentinel
    component: cache
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
        component: cache
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: sentinel
        image: redis:7-alpine
        ports:
        - name: sentinel
          containerPort: 26379
        command:
        - redis-sentinel
        - /etc/redis/sentinel.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis-sentinel
              topologyKey: kubernetes.io/hostname
---
# Redis主节点服务
apiVersion: v1
kind: Service
metadata:
  name: redis-master-service
  namespace: enterprise-app
  labels:
    app: redis
    role: master
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  - name: metrics
    port: 9121
    targetPort: metrics
  selector:
    app: redis
    role: master
---
# Redis从节点服务
apiVersion: v1
kind: Service
metadata:
  name: redis-slave-service
  namespace: enterprise-app
  labels:
    app: redis
    role: slave
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  - name: metrics
    port: 9121
    targetPort: metrics
  selector:
    app: redis
    role: slave
---
# Redis Sentinel服务
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-service
  namespace: enterprise-app
  labels:
    app: redis-sentinel
spec:
  type: ClusterIP
  ports:
  - name: sentinel
    port: 26379
    targetPort: sentinel
  selector:
    app: redis-sentinel
---
# Redis配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: enterprise-app
data:
  redis.conf: |
    # 网络配置
    bind 0.0.0.0
    port 6379
    protected-mode yes
    
    # 认证
    requirepass ${REDIS_PASSWORD}
    
    # 持久化
    appendonly yes
    appendfsync everysec
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # 内存管理
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # 快照
    save 900 1
    save 300 10
    save 60 10000
    
    # 日志
    loglevel notice
    logfile ""
    
    # 客户端
    timeout 300
    tcp-keepalive 300
    
    # 复制
    masterauth ${REDIS_PASSWORD}
    
    # 性能优化
    tcp-backlog 511
    databases 16
    
    # 慢查询日志
    slowlog-log-slower-than 10000
    slowlog-max-len 128
---
# Redis Sentinel配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: enterprise-app
data:
  sentinel.conf: |
    # 端口
    port 26379
    
    # 监控主节点
    sentinel monitor mymaster redis-master-service 6379 2
    sentinel auth-pass mymaster ${REDIS_PASSWORD}
    
    # 故障转移配置
    sentinel down-after-milliseconds mymaster 30000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 180000
    
    # 通知脚本
    # sentinel notification-script mymaster /var/redis/notify.sh
    # sentinel client-reconfig-script mymaster /var/redis/reconfig.sh
    
    # 日志
    logfile ""
    
    # 拒绝危险命令
    sentinel deny-scripts-reconfig yes
---
# Redis密钥
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: enterprise-app
type: Opaque
data:
  password: cmVkaXNfcGFzc3dvcmQ=  # redis_password
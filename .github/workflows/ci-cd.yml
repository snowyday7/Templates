# 企业级CI/CD流水线配置
name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # 每天凌晨2点运行安全扫描
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # =============================================================================
  # 代码质量检查
  # =============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Linting (flake8)
      run: flake8 .
    
    - name: Type checking (mypy)
      run: mypy .
    
    - name: Security linting (bandit)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # =============================================================================
  # 单元测试
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        APP_ENVIRONMENT: testing
      run: |
        pytest tests/unit/ \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          --html=pytest-report.html \
          --self-contained-html
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          pytest-report.html
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # =============================================================================
  # 集成测试
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # 等待服务启动
    
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Run integration tests
      env:
        APP_ENVIRONMENT: testing
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ \
          --junitxml=integration-test-report.xml \
          --html=integration-test-report.html \
          --self-contained-html
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-report.xml
          integration-test-report.html
    
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # =============================================================================
  # 安全扫描
  # =============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python

  # =============================================================================
  # 构建Docker镜像
  # =============================================================================
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, unit-tests]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: runtime
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILD_ENV=production
          APP_VERSION=${{ github.sha }}
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # =============================================================================
  # 容器安全扫描
  # =============================================================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-image]
    
    steps:
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-image.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # =============================================================================
  # 性能测试
  # =============================================================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install performance testing tools
      run: |
        pip install locust pytest-benchmark
    
    - name: Start application
      run: |
        docker run -d -p 8000:8000 \
          --name test-app \
          ${{ needs.build-image.outputs.image-tag }}
        sleep 30
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py \
          --host http://localhost:8000 \
          --users 100 \
          --spawn-rate 10 \
          --run-time 5m \
          --html performance-report.html \
          --headless
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: performance-report.html
    
    - name: Stop application
      if: always()
      run: docker stop test-app && docker rm test-app

  # =============================================================================
  # 部署到开发环境
  # =============================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [integration-tests, build-image]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev-api.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.DEV_KUBECONFIG }}
    
    - name: Deploy to development
      run: |
        # 更新镜像标签
        kubectl set image deployment/enterprise-app \
          app=${{ needs.build-image.outputs.image-tag }} \
          -n enterprise-app-dev
        
        # 等待部署完成
        kubectl rollout status deployment/enterprise-app \
          -n enterprise-app-dev \
          --timeout=300s
    
    - name: Run smoke tests
      run: |
        kubectl run smoke-test \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          -- curl -f https://dev-api.company.com/health

  # =============================================================================
  # 部署到预生产环境
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [integration-tests, build-image, container-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-api.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}
    
    - name: Deploy to staging
      run: |
        # 更新镜像标签
        kubectl set image deployment/enterprise-app \
          app=${{ needs.build-image.outputs.image-tag }} \
          -n enterprise-app-staging
        
        # 等待部署完成
        kubectl rollout status deployment/enterprise-app \
          -n enterprise-app-staging \
          --timeout=600s
    
    - name: Run end-to-end tests
      run: |
        pytest tests/e2e/ \
          --base-url https://staging-api.company.com \
          --junitxml=e2e-test-report.xml
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: e2e-test-report.xml

  # =============================================================================
  # 部署到生产环境
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [deploy-staging, performance-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://api.company.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PROD_KUBECONFIG }}
    
    - name: Create backup
      run: |
        # 备份当前部署
        kubectl get deployment enterprise-app \
          -n enterprise-app \
          -o yaml > backup-deployment.yaml
    
    - name: Deploy to production (Blue-Green)
      run: |
        # 蓝绿部署策略
        kubectl patch deployment enterprise-app \
          -n enterprise-app \
          -p '{"spec":{"template":{"spec":{"containers":[{"name":"app","image":"${{ needs.build-image.outputs.image-tag }}"}]}}}}'
        
        # 等待部署完成
        kubectl rollout status deployment/enterprise-app \
          -n enterprise-app \
          --timeout=900s
    
    - name: Health check
      run: |
        # 健康检查
        for i in {1..10}; do
          if curl -f https://api.company.com/health; then
            echo "Health check passed"
            break
          fi
          echo "Health check failed, attempt $i/10"
          sleep 30
        done
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        kubectl rollout undo deployment/enterprise-app -n enterprise-app
        kubectl rollout status deployment/enterprise-app -n enterprise-app
    
    - name: Update release notes
      if: success()
      run: |
        echo "Deployment successful for release ${{ github.event.release.tag_name }}"

  # =============================================================================
  # 通知
  # =============================================================================
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production, deploy-staging, deploy-dev]
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Email
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.company.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: 'CI/CD Pipeline Failed - ${{ github.repository }}'
        to: devops@company.com
        from: ci-cd@company.com
        body: |
          The CI/CD pipeline for ${{ github.repository }} has failed.
          
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.

  # =============================================================================
  # 清理
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-production, deploy-staging, deploy-dev, notify]
    
    steps:
    - name: Clean up old images
      run: |
        # 清理超过30天的旧镜像
        echo "Cleaning up old container images..."
        # 这里可以添加清理逻辑
    
    - name: Clean up artifacts
      run: |
        # 清理旧的构建产物
        echo "Cleaning up old artifacts..."
        # 这里可以添加清理逻辑
# 测试环境Docker Compose配置
version: '3.8'

services:
  # =============================================================================
  # 应用服务
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: enterprise-app-test
    ports:
      - "8000:8000"
    environment:
      - APP_ENVIRONMENT=testing
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - LOG_LEVEL=DEBUG
      - TESTING=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./tests:/app/tests:ro
      - ./coverage:/app/coverage
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # 数据库服务
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres-test
    environment:
      - POSTGRES_DB=test_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # =============================================================================
  # Redis缓存服务
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: redis-test
    ports:
      - "6379:6379"
    volumes:
      - redis_test_data:/data
      - ./config/redis-test.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # =============================================================================
  # 消息队列服务
  # =============================================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq-test
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_test_data:/var/lib/rabbitmq
      - ./config/rabbitmq-test.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # 测试数据库（用于并行测试）
  # =============================================================================
  postgres-parallel:
    image: postgres:15-alpine
    container_name: postgres-parallel-test
    environment:
      - POSTGRES_DB=parallel_test_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_parallel_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d parallel_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # =============================================================================
  # 测试工具服务
  # =============================================================================
  
  # Selenium Grid Hub（用于E2E测试）
  selenium-hub:
    image: selenium/hub:4.15
    container_name: selenium-hub-test
    ports:
      - "4444:4444"
    environment:
      - GRID_MAX_SESSION=5
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Chrome节点
  selenium-chrome:
    image: selenium/node-chrome:4.15
    container_name: selenium-chrome-test
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
    depends_on:
      - selenium-hub
    networks:
      - test-network
    shm_size: 2gb

  # Firefox节点
  selenium-firefox:
    image: selenium/node-firefox:4.15
    container_name: selenium-firefox-test
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
    depends_on:
      - selenium-hub
    networks:
      - test-network
    shm_size: 2gb

  # =============================================================================
  # 监控和观测服务（测试环境简化版）
  # =============================================================================
  
  # Jaeger（分布式追踪）
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger-test
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus（指标收集）
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus-test
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus-test.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_test_data:/prometheus
    networks:
      - test-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # 测试数据生成器
  # =============================================================================
  test-data-generator:
    build:
      context: .
      dockerfile: Dockerfile.test-data
    container_name: test-data-generator
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./tests/fixtures:/app/fixtures:ro
    networks:
      - test-network
    profiles:
      - data-generation

  # =============================================================================
  # 性能测试服务
  # =============================================================================
  locust-master:
    image: locustio/locust:2.17.0
    container_name: locust-master-test
    ports:
      - "8089:8089"
    volumes:
      - ./tests/performance:/mnt/locust:ro
    command: -f /mnt/locust/locustfile.py --master -H http://app:8000
    networks:
      - test-network
    profiles:
      - performance

  locust-worker:
    image: locustio/locust:2.17.0
    volumes:
      - ./tests/performance:/mnt/locust:ro
    command: -f /mnt/locust/locustfile.py --worker --master-host locust-master
    networks:
      - test-network
    profiles:
      - performance
    deploy:
      replicas: 2

  # =============================================================================
  # 测试报告服务
  # =============================================================================
  allure:
    image: frankescobar/allure-docker-service:2.23.0
    container_name: allure-test
    ports:
      - "5050:5050"
    environment:
      - CHECK_RESULTS_EVERY_SECONDS=3
      - KEEP_HISTORY=1
    volumes:
      - ./allure-results:/app/allure-results
      - ./allure-reports:/app/default-reports
    networks:
      - test-network
    profiles:
      - reporting

# =============================================================================
# 网络配置
# =============================================================================
networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# 数据卷配置
# =============================================================================
volumes:
  postgres_test_data:
    driver: local
  postgres_parallel_data:
    driver: local
  redis_test_data:
    driver: local
  rabbitmq_test_data:
    driver: local
  prometheus_test_data:
    driver: local
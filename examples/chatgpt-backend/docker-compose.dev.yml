version: '3.8'

services:
  # 开发环境应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: chatgpt-backend-dev
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/chatgpt_backend_dev
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-not-for-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000
      - RELOAD=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - chatgpt-dev-network
    restart: unless-stopped
    command: >
      sh -c "python scripts/init_db.py --skip-examples &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # 开发环境PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: chatgpt-postgres-dev
    environment:
      - POSTGRES_DB=chatgpt_backend_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # 使用不同端口避免冲突
    networks:
      - chatgpt-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatgpt_backend_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 开发环境Redis缓存
  redis:
    image: redis:7-alpine
    container_name: chatgpt-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    ports:
      - "6380:6379"  # 使用不同端口避免冲突
    networks:
      - chatgpt-dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: chatgpt-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
    networks:
      - chatgpt-dev-network
    restart: unless-stopped

  # Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: chatgpt-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - chatgpt-dev-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  chatgpt-dev-network:
    driver: bridge
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: microservice-demo
type: Opaque
data:
  # postgres://postgres:password@postgres:5432/microservice_db
  url: cG9zdGdyZXM6Ly9wb3N0Z3JlczpwYXNzd29yZEBwb3N0Z3Jlczo1NDMyL21pY3Jvc2VydmljZV9kYg==
  username: cG9zdGdyZXM=  # postgres
  password: cGFzc3dvcmQ=  # password
  database: bWljcm9zZXJ2aWNlX2Ri  # microservice_db
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: microservice-demo
type: Opaque
data:
  # redis://redis:6379/0
  url: cmVkaXM6Ly9yZWRpczozNjM3OS8w
  password: ""  # no password
---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: microservice-demo
type: Opaque
data:
  # your-super-secret-jwt-key-change-in-production
  secret-key: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: microservice-demo
data:
  POSTGRES_DB: microservice_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  PGDATA: /var/lib/postgresql/data/pgdata
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: microservice-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: microservice-demo
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: PGDATA
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: microservice-demo
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: microservice-demo
data:
  01-init-databases.sql: |
    -- Create databases for each microservice
    CREATE DATABASE user_service_db;
    CREATE DATABASE product_service_db;
    CREATE DATABASE order_service_db;
    CREATE DATABASE notification_service_db;
    
    -- Create users for each service
    CREATE USER user_service WITH PASSWORD 'user_service_pass';
    CREATE USER product_service WITH PASSWORD 'product_service_pass';
    CREATE USER order_service WITH PASSWORD 'order_service_pass';
    CREATE USER notification_service WITH PASSWORD 'notification_service_pass';
    
    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE user_service_db TO user_service;
    GRANT ALL PRIVILEGES ON DATABASE product_service_db TO product_service;
    GRANT ALL PRIVILEGES ON DATABASE order_service_db TO order_service;
    GRANT ALL PRIVILEGES ON DATABASE notification_service_db TO notification_service;
  
  02-create-extensions.sql: |
    -- Enable extensions for each database
    \c user_service_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    \c product_service_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    \c order_service_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    \c notification_service_db;
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: microservice-demo
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 300m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: microservice-demo
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: microservice-demo
data:
  redis.conf: |
    # Redis configuration for microservices
    bind 0.0.0.0
    port 6379
    
    # Memory management
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    
    # Logging
    loglevel notice
    logfile ""
    
    # Security
    protected-mode no
    
    # Performance
    tcp-keepalive 300
    timeout 0
    
    # Append only file
    appendonly yes
    appendfsync everysec
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
[tool:pytest]
# pytest配置文件

# 最小版本要求
minversion = 7.0

# 默认参数
addopts = 
    -ra
    -q
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --color=yes

# 测试路径
testpaths = tests

# Python文件模式
python_files = 
    test_*.py
    *_test.py

# Python类模式
python_classes = 
    Test*
    *Test
    *Tests

# Python函数模式
python_functions = 
    test_*

# 测试标记
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    e2e: marks tests as end-to-end tests
    database: marks tests that require database
    redis: marks tests that require redis
    docker: marks tests that require docker
    network: marks tests that require network access
    performance: marks tests as performance tests
    security: marks tests as security tests
    api: marks tests for API functionality
    auth: marks tests for authentication
    cache: marks tests for caching functionality
    monitoring: marks tests for monitoring functionality
    deployment: marks tests for deployment functionality
    smoke: marks tests as smoke tests
    regression: marks tests as regression tests
    critical: marks tests as critical
    high: marks tests as high priority
    medium: marks tests as medium priority
    low: marks tests as low priority

# 过滤警告
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    ignore::ResourceWarning
    # SQLAlchemy warnings
    ignore:.*SAWarning.*:sqlalchemy.exc.SAWarning
    # Pydantic warnings
    ignore:.*pydantic.*:UserWarning
    # Redis warnings
    ignore:.*redis.*:UserWarning
    # Celery warnings
    ignore:.*celery.*:UserWarning
    # FastAPI warnings
    ignore:.*fastapi.*:UserWarning

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 文件日志
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 自动使用日志
log_auto_indent = true

# 控制台输出
console_output_style = progress

# JUnit XML报告
junit_suite_name = python-backend-templates
junit_logging = all
junit_log_passing_tests = true
junit_duration_report = total

# 覆盖率配置（如果使用pytest-cov）
# 这些配置也可以在pyproject.toml中设置
# addopts = --cov=templates --cov-report=html --cov-report=term-missing

# 并行测试配置（如果使用pytest-xdist）
# addopts = -n auto

# 超时配置（如果使用pytest-timeout）
# timeout = 300
# timeout_method = thread

# 基准测试配置（如果使用pytest-benchmark）
# benchmark_only = false
# benchmark_sort = mean
# benchmark_compare_fail = mean:5%

# 异步测试配置（如果使用pytest-asyncio）
asyncio_mode = auto

# 临时目录配置
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# 缓存配置
cache_dir = .pytest_cache

# 收集配置
collect_ignore = [
    "setup.py",
    "build",
    "dist",
    ".tox",
    ".venv",
    "venv",
    "env",
    "node_modules",
    ".git",
    ".github",
    "docs",
    "examples/output",
    "examples/generated"
]

# 最小失败数
minimum_failure_count = 1

# 显示额外的测试摘要信息
# -r chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)assed, (P)assed with output, (a)ll except pP
# addopts = -ra

# 详细输出
# addopts = -v

# 显示本地变量
# addopts = -l

# 显示最慢的测试
# addopts = --durations=10

# 在第一个失败后停止
# addopts = -x

# 在N个失败后停止
# addopts = --maxfail=5

# 只运行失败的测试
# addopts = --lf

# 先运行失败的测试
# addopts = --ff

# 运行新的测试
# addopts = --nf

# 显示跳过的测试原因
# addopts = -rs

# 禁用插件
# addopts = -p no:warnings

# 启用插件
# addopts = -p pytest_html

# 设置环境变量
env =
    TESTING = 1
    PYTHONPATH = .
    LOG_LEVEL = DEBUG